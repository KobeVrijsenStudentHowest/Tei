#include "Keyboard.h"

#include <SDL.h>

using namespace tei::internal::input;

using enum DeviceId;
    
KeyboardInput::Main::Type const KeyboardInput::Main::A{ KEYBOARD, SDL_SCANCODE_A };
KeyboardInput::Main::Type const KeyboardInput::Main::B{ KEYBOARD, SDL_SCANCODE_B };
KeyboardInput::Main::Type const KeyboardInput::Main::C{ KEYBOARD, SDL_SCANCODE_C };
KeyboardInput::Main::Type const KeyboardInput::Main::D{ KEYBOARD, SDL_SCANCODE_D };
KeyboardInput::Main::Type const KeyboardInput::Main::E{ KEYBOARD, SDL_SCANCODE_E };
KeyboardInput::Main::Type const KeyboardInput::Main::F{ KEYBOARD, SDL_SCANCODE_F };
KeyboardInput::Main::Type const KeyboardInput::Main::G{ KEYBOARD, SDL_SCANCODE_G };
KeyboardInput::Main::Type const KeyboardInput::Main::H{ KEYBOARD, SDL_SCANCODE_H };
KeyboardInput::Main::Type const KeyboardInput::Main::I{ KEYBOARD, SDL_SCANCODE_I };
KeyboardInput::Main::Type const KeyboardInput::Main::J{ KEYBOARD, SDL_SCANCODE_J };
KeyboardInput::Main::Type const KeyboardInput::Main::K{ KEYBOARD, SDL_SCANCODE_K };
KeyboardInput::Main::Type const KeyboardInput::Main::L{ KEYBOARD, SDL_SCANCODE_L };
KeyboardInput::Main::Type const KeyboardInput::Main::M{ KEYBOARD, SDL_SCANCODE_M };
KeyboardInput::Main::Type const KeyboardInput::Main::N{ KEYBOARD, SDL_SCANCODE_N };
KeyboardInput::Main::Type const KeyboardInput::Main::O{ KEYBOARD, SDL_SCANCODE_O };
KeyboardInput::Main::Type const KeyboardInput::Main::P{ KEYBOARD, SDL_SCANCODE_P };
KeyboardInput::Main::Type const KeyboardInput::Main::Q{ KEYBOARD, SDL_SCANCODE_Q };
KeyboardInput::Main::Type const KeyboardInput::Main::R{ KEYBOARD, SDL_SCANCODE_R };
KeyboardInput::Main::Type const KeyboardInput::Main::S{ KEYBOARD, SDL_SCANCODE_S };
KeyboardInput::Main::Type const KeyboardInput::Main::T{ KEYBOARD, SDL_SCANCODE_T };
KeyboardInput::Main::Type const KeyboardInput::Main::U{ KEYBOARD, SDL_SCANCODE_U };
KeyboardInput::Main::Type const KeyboardInput::Main::V{ KEYBOARD, SDL_SCANCODE_V };
KeyboardInput::Main::Type const KeyboardInput::Main::W{ KEYBOARD, SDL_SCANCODE_W };
KeyboardInput::Main::Type const KeyboardInput::Main::X{ KEYBOARD, SDL_SCANCODE_X };
KeyboardInput::Main::Type const KeyboardInput::Main::Y{ KEYBOARD, SDL_SCANCODE_Y };
KeyboardInput::Main::Type const KeyboardInput::Main::Z{ KEYBOARD, SDL_SCANCODE_Z };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_1{ KEYBOARD, SDL_SCANCODE_1 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_2{ KEYBOARD, SDL_SCANCODE_2 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_3{ KEYBOARD, SDL_SCANCODE_3 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_4{ KEYBOARD, SDL_SCANCODE_4 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_5{ KEYBOARD, SDL_SCANCODE_5 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_6{ KEYBOARD, SDL_SCANCODE_6 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_7{ KEYBOARD, SDL_SCANCODE_7 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_8{ KEYBOARD, SDL_SCANCODE_8 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_9{ KEYBOARD, SDL_SCANCODE_9 };
KeyboardInput::Main::Type const KeyboardInput::Main::NUM_0{ KEYBOARD, SDL_SCANCODE_0 };
KeyboardInput::Main::Type const KeyboardInput::Main::RETURN{ KEYBOARD, SDL_SCANCODE_RETURN };
KeyboardInput::Main::Type const KeyboardInput::Main::ESCAPE{ KEYBOARD, SDL_SCANCODE_ESCAPE };
KeyboardInput::Main::Type const KeyboardInput::Main::BACKSPACE{ KEYBOARD, SDL_SCANCODE_BACKSPACE };
KeyboardInput::Main::Type const KeyboardInput::Main::TAB{ KEYBOARD, SDL_SCANCODE_TAB };
KeyboardInput::Main::Type const KeyboardInput::Main::SPACE{ KEYBOARD, SDL_SCANCODE_SPACE };
KeyboardInput::Main::Type const KeyboardInput::Main::SEMICOLON{ KEYBOARD, SDL_SCANCODE_SEMICOLON };
KeyboardInput::Main::Type const KeyboardInput::Main::APOSTROPHE{ KEYBOARD, SDL_SCANCODE_APOSTROPHE };
KeyboardInput::Main::Type const KeyboardInput::Main::GRAVE{ KEYBOARD, SDL_SCANCODE_GRAVE };
KeyboardInput::Main::Type const KeyboardInput::Main::COMMA{ KEYBOARD, SDL_SCANCODE_COMMA };
KeyboardInput::Main::Type const KeyboardInput::Main::PERIOD{ KEYBOARD, SDL_SCANCODE_PERIOD };
KeyboardInput::Main::Type const KeyboardInput::Main::SLASH{ KEYBOARD, SDL_SCANCODE_SLASH };
KeyboardInput::Main::Type const KeyboardInput::Main::CAPSLOCK{ KEYBOARD, SDL_SCANCODE_CAPSLOCK };
             
KeyboardInput::F::Type const KeyboardInput::F::F1{ KEYBOARD, SDL_SCANCODE_F1 };
KeyboardInput::F::Type const KeyboardInput::F::F2{ KEYBOARD, SDL_SCANCODE_F2 };
KeyboardInput::F::Type const KeyboardInput::F::F3{ KEYBOARD, SDL_SCANCODE_F3 };
KeyboardInput::F::Type const KeyboardInput::F::F4{ KEYBOARD, SDL_SCANCODE_F4 };
KeyboardInput::F::Type const KeyboardInput::F::F5{ KEYBOARD, SDL_SCANCODE_F5 };
KeyboardInput::F::Type const KeyboardInput::F::F6{ KEYBOARD, SDL_SCANCODE_F6 };
KeyboardInput::F::Type const KeyboardInput::F::F7{ KEYBOARD, SDL_SCANCODE_F7 };
KeyboardInput::F::Type const KeyboardInput::F::F8{ KEYBOARD, SDL_SCANCODE_F8 };
KeyboardInput::F::Type const KeyboardInput::F::F9{ KEYBOARD, SDL_SCANCODE_F9 };
KeyboardInput::F::Type const KeyboardInput::F::F10{ KEYBOARD, SDL_SCANCODE_F10 };
KeyboardInput::F::Type const KeyboardInput::F::F11{ KEYBOARD, SDL_SCANCODE_F11 };
KeyboardInput::F::Type const KeyboardInput::F::F12{ KEYBOARD, SDL_SCANCODE_F12 };
KeyboardInput::F::Type const KeyboardInput::F::F13{ KEYBOARD, SDL_SCANCODE_F13 };
KeyboardInput::F::Type const KeyboardInput::F::F14{ KEYBOARD, SDL_SCANCODE_F14 };
KeyboardInput::F::Type const KeyboardInput::F::F15{ KEYBOARD, SDL_SCANCODE_F15 };
KeyboardInput::F::Type const KeyboardInput::F::F16{ KEYBOARD, SDL_SCANCODE_F16 };
KeyboardInput::F::Type const KeyboardInput::F::F17{ KEYBOARD, SDL_SCANCODE_F17 };
KeyboardInput::F::Type const KeyboardInput::F::F18{ KEYBOARD, SDL_SCANCODE_F18 };
KeyboardInput::F::Type const KeyboardInput::F::F19{ KEYBOARD, SDL_SCANCODE_F19 };
KeyboardInput::F::Type const KeyboardInput::F::F20{ KEYBOARD, SDL_SCANCODE_F20 };
KeyboardInput::F::Type const KeyboardInput::F::F21{ KEYBOARD, SDL_SCANCODE_F21 };
KeyboardInput::F::Type const KeyboardInput::F::F22{ KEYBOARD, SDL_SCANCODE_F22 };
KeyboardInput::F::Type const KeyboardInput::F::F23{ KEYBOARD, SDL_SCANCODE_F23 };
KeyboardInput::F::Type const KeyboardInput::F::F24{ KEYBOARD, SDL_SCANCODE_F24 };
  
KeyboardInput::Home::Type const KeyboardInput::Home::PRINTSCREEN{ KEYBOARD, SDL_SCANCODE_PRINTSCREEN };
KeyboardInput::Home::Type const KeyboardInput::Home::SCROLLLOCK{ KEYBOARD, SDL_SCANCODE_SCROLLLOCK };
KeyboardInput::Home::Type const KeyboardInput::Home::PAUSE{ KEYBOARD, SDL_SCANCODE_PAUSE };
KeyboardInput::Home::Type const KeyboardInput::Home::INSERT{ KEYBOARD, SDL_SCANCODE_INSERT };
KeyboardInput::Home::Type const KeyboardInput::Home::HOME{ KEYBOARD, SDL_SCANCODE_HOME };
KeyboardInput::Home::Type const KeyboardInput::Home::PAGEUP{ KEYBOARD, SDL_SCANCODE_PAGEUP };
KeyboardInput::Home::Type const KeyboardInput::Home::DELETE{ KEYBOARD, SDL_SCANCODE_DELETE };
KeyboardInput::Home::Type const KeyboardInput::Home::END{ KEYBOARD, SDL_SCANCODE_END };
KeyboardInput::Home::Type const KeyboardInput::Home::PAGEDOWN{ KEYBOARD, SDL_SCANCODE_PAGEDOWN };
                                  
KeyboardInput::Arrow::Type const KeyboardInput::Arrow::RIGHT{ KEYBOARD, SDL_SCANCODE_RIGHT };
KeyboardInput::Arrow::Type const KeyboardInput::Arrow::LEFT{ KEYBOARD, SDL_SCANCODE_LEFT };
KeyboardInput::Arrow::Type const KeyboardInput::Arrow::DOWN{ KEYBOARD, SDL_SCANCODE_DOWN };
KeyboardInput::Arrow::Type const KeyboardInput::Arrow::UP{ KEYBOARD, SDL_SCANCODE_UP };
                                  
KeyboardInput::Control::Type const KeyboardInput::Control::EXECUTE{ KEYBOARD, SDL_SCANCODE_EXECUTE };
KeyboardInput::Control::Type const KeyboardInput::Control::HELP{ KEYBOARD, SDL_SCANCODE_HELP };
KeyboardInput::Control::Type const KeyboardInput::Control::MENU{ KEYBOARD, SDL_SCANCODE_MENU };
KeyboardInput::Control::Type const KeyboardInput::Control::SELECT{ KEYBOARD, SDL_SCANCODE_SELECT };
KeyboardInput::Control::Type const KeyboardInput::Control::STOP{ KEYBOARD, SDL_SCANCODE_STOP };
KeyboardInput::Control::Type const KeyboardInput::Control::REDO{ KEYBOARD, SDL_SCANCODE_AGAIN };
KeyboardInput::Control::Type const KeyboardInput::Control::UNDO{ KEYBOARD, SDL_SCANCODE_UNDO };
KeyboardInput::Control::Type const KeyboardInput::Control::CUT{ KEYBOARD, SDL_SCANCODE_CUT };
KeyboardInput::Control::Type const KeyboardInput::Control::COPY{ KEYBOARD, SDL_SCANCODE_COPY };
KeyboardInput::Control::Type const KeyboardInput::Control::PASTE{ KEYBOARD, SDL_SCANCODE_PASTE };
KeyboardInput::Control::Type const KeyboardInput::Control::FIND{ KEYBOARD, SDL_SCANCODE_FIND };
KeyboardInput::Control::Type const KeyboardInput::Control::MUTE{ KEYBOARD, SDL_SCANCODE_MUTE };
KeyboardInput::Control::Type const KeyboardInput::Control::MEDIASELECT{ KEYBOARD, SDL_SCANCODE_MEDIASELECT };
KeyboardInput::Control::Type const KeyboardInput::Control::VOLUMEUP{ KEYBOARD, SDL_SCANCODE_VOLUMEUP };
KeyboardInput::Control::Type const KeyboardInput::Control::VOLUMEDOWN{ KEYBOARD, SDL_SCANCODE_VOLUMEDOWN };
                                  
KeyboardInput::Control::Audio::Type const KeyboardInput::Control::Audio::AUDIONEXT{ KEYBOARD, SDL_SCANCODE_AUDIONEXT };
KeyboardInput::Control::Audio::Type const KeyboardInput::Control::Audio::AUDIOPREV{ KEYBOARD, SDL_SCANCODE_AUDIOPREV };
KeyboardInput::Control::Audio::Type const KeyboardInput::Control::Audio::AUDIOSTOP{ KEYBOARD, SDL_SCANCODE_AUDIOSTOP };
KeyboardInput::Control::Audio::Type const KeyboardInput::Control::Audio::AUDIOPLAY{ KEYBOARD, SDL_SCANCODE_AUDIOPLAY };
KeyboardInput::Control::Audio::Type const KeyboardInput::Control::Audio::AUDIOMUTE{ KEYBOARD, SDL_SCANCODE_AUDIOMUTE };
KeyboardInput::Control::Audio::Type const KeyboardInput::Control::Audio::AUDIOREWIND{ KEYBOARD, SDL_SCANCODE_AUDIOREWIND };
KeyboardInput::Control::Audio::Type const KeyboardInput::Control::Audio::AUDIOFASTFORWARD{ KEYBOARD, SDL_SCANCODE_AUDIOFASTFORWARD };
                                  
KeyboardInput::Mod::Type const KeyboardInput::Mod::META{ KEYBOARD, SDL_SCANCODE_LGUI };
KeyboardInput::Mod::Type const KeyboardInput::Mod::MODE{ KEYBOARD, SDL_SCANCODE_MODE };
KeyboardInput::Mod::Type const KeyboardInput::Mod::LCTRL{ KEYBOARD, SDL_SCANCODE_LCTRL };
KeyboardInput::Mod::Type const KeyboardInput::Mod::LSHIFT{ KEYBOARD, SDL_SCANCODE_LSHIFT };
KeyboardInput::Mod::Type const KeyboardInput::Mod::LALT{ KEYBOARD, SDL_SCANCODE_LALT };
KeyboardInput::Mod::Type const KeyboardInput::Mod::LMETA{ KEYBOARD, SDL_SCANCODE_LGUI };
KeyboardInput::Mod::Type const KeyboardInput::Mod::RCTRL{ KEYBOARD, SDL_SCANCODE_RCTRL };
KeyboardInput::Mod::Type const KeyboardInput::Mod::RSHIFT{ KEYBOARD, SDL_SCANCODE_RSHIFT };
KeyboardInput::Mod::Type const KeyboardInput::Mod::RALT{ KEYBOARD, SDL_SCANCODE_RALT };
KeyboardInput::Mod::Type const KeyboardInput::Mod::RMETA{ KEYBOARD, SDL_SCANCODE_RGUI };

KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL1{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL1 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL2{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL2 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL3{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL3 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL4{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL4 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL5{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL5 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL6{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL6 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL7{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL7 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL8{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL8 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::INTERNATIONAL9{ KEYBOARD, SDL_SCANCODE_INTERNATIONAL9 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG1{ KEYBOARD, SDL_SCANCODE_LANG1 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG2{ KEYBOARD, SDL_SCANCODE_LANG2 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG3{ KEYBOARD, SDL_SCANCODE_LANG3 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG4{ KEYBOARD, SDL_SCANCODE_LANG4 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG5{ KEYBOARD, SDL_SCANCODE_LANG5 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG6{ KEYBOARD, SDL_SCANCODE_LANG6 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG7{ KEYBOARD, SDL_SCANCODE_LANG7 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG8{ KEYBOARD, SDL_SCANCODE_LANG8 };
KeyboardInput::Lang::Type const KeyboardInput::Lang::LANG9{ KEYBOARD, SDL_SCANCODE_LANG9 };

KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUMLOCK{ KEYBOARD, SDL_SCANCODE_NUMLOCKCLEAR };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::DIVIDE{ KEYBOARD, SDL_SCANCODE_KP_DIVIDE };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::MULTIPLY{ KEYBOARD, SDL_SCANCODE_KP_MULTIPLY };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::MINUS{ KEYBOARD, SDL_SCANCODE_KP_MINUS };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::PLUS{ KEYBOARD, SDL_SCANCODE_KP_PLUS };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::ENTER{ KEYBOARD, SDL_SCANCODE_KP_ENTER };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_1{ KEYBOARD, SDL_SCANCODE_KP_1 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_2{ KEYBOARD, SDL_SCANCODE_KP_2 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_3{ KEYBOARD, SDL_SCANCODE_KP_3 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_4{ KEYBOARD, SDL_SCANCODE_KP_4 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_5{ KEYBOARD, SDL_SCANCODE_KP_5 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_6{ KEYBOARD, SDL_SCANCODE_KP_6 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_7{ KEYBOARD, SDL_SCANCODE_KP_7 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_8{ KEYBOARD, SDL_SCANCODE_KP_8 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_9{ KEYBOARD, SDL_SCANCODE_KP_9 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::NUM_0{ KEYBOARD, SDL_SCANCODE_KP_0 };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::PERIOD{ KEYBOARD, SDL_SCANCODE_KP_PERIOD };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::COMMA{ KEYBOARD, SDL_SCANCODE_KP_COMMA };
KeyboardInput::Keypad::Type const KeyboardInput::Keypad::EQUALS{ KEYBOARD, SDL_SCANCODE_KP_EQUALS };
